/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

params {
    run_analyses = params.analyses.split(',').toList()
    skip_analyses = params.skip? params.skip.split(',').toList() : []
}

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    withName: 'GUNZIP*' {
        publishDir = [
            enabled: false
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MTX_TO_H5AD|CONCAT_H5AD|MTX_TO_SEURAT' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/mtx_conversions" },
            mode: params.publish_dir_mode
        ]
    }
    withName: 'GTF_GENE_FILTER' {
        publishDir = [
            path: { "${params.outdir}/gtf_filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: 'MAKE_REPORT' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode
        ]
        // docker.registry = 'docker'
    }

}



if (params.aligner == "alevin") {
    process {
        withName: GFFREAD_TXP2GENE {
            ext.args = "--table transcript_id,gene_id"
            ext.prefix = { "${gff.baseName}_gffread" }
        }
        withName: 'SIMPLEAF_INDEX' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference
            ]
            ext.args = { "--rlen ${params.simpleaf_rlen}" }
        }
        withName: 'SIMPLEAF_QUANT' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode
            ]
            ext.args = "-r cr-like"
        }
        // Fix for issue 196
        // Modified for issue 334
        withName: 'ALEVINQC' {
            time = { check_max( 120.h, 'time' ) }
        }
    }
}

if (params.aligner == "star") {
    process {
        withName: STAR_ALIGN {
            ext.args = "--readFilesCommand zcat --runDirPerm All_RWX --outWigType bedGraph --twopassMode Basic --outSAMtype BAM SortedByCoordinate"
        }
        withName: STAR_GENOMEGENERATE {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/genome_generate" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference
            ]
        }
        withName: STAR_ALIGN {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/${meta.id}" },
                mode: params.publish_dir_mode
            ]
        }
    }
}

if (params.aligner == 'kallisto') {
    process {
        withName: KALLISTOBUSTOOLS_REF {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference
            ]
        }
        withName: KALLISTOBUSTOOLS_COUNT {
            def kb_filter = (params.kb_filter) ? '--filter' : ''
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode
            ]
            ext.args = "--workflow ${params.kb_workflow} ${kb_filter}"
        }
    }
}


process {

    if (params.run_analyses.contains('secondary') and !params.skip_analyses.contains('qccellfilter')) {
        withName: 'QC_CELL_FILTER' {
            ext.args   = params.args_qccellfilter ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.contains('secondary') and !params.skip_analyses.contains('clustering')) {
        withName: 'CLUSTERING_ANALYSIS' {
            ext.args   = params.args_clustering ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.any{it=='tertiary' || it=='annotation'} and !params.skip_analyses.contains('annotation')) {
        withName: 'ANNOTATE_CELLS' {
            ext.args   = params.args_annotation ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

    if (params.run_analyses.contains('ctmodel') and !params.skip_analyses.contains('ctmodel')) {
        withName: 'TRAIN_CT_MODEL' {
            ext.args   = params.args_trainctmodel ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }


    if (params.run_analyses.any{it=='tertiary' || it=='dea'} and !params.skip_analyses.contains('dea')) {
        withName: 'RANK_GENES' {
            ext.args   = params.args_dea ?: ''
            // ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                // enabled: params.save_reference
            ]
        }
    }

}